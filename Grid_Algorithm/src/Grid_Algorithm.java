
public class Grid_Algorithm {

	/*
	 * 그리디 알고리즘(탐욕법)은 현재 상황에서 지금 당장 좋은 것만 고르는 방법을 의미합니다
	 * 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력을 요구합니다
	 * 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토합니다
	 * 일반적이 상황에서는 그릳 알고리즘은 최적의 해를 보장할 수 없을 때가 많다
	 * */
	
	
	/* 문제1
	 * 당신은 음식점의 계산을 도와주는 점원이다. 카운터에는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정한다.
	 * 손님에게 거슬러 줘야 할 돈이 N원일 때 거슬러 줘야 할 동전의 최소 개수를 구하라. 단, 거슬러 줘야 할 돈N은 항상 10의 배수이다.
	 * N = 1,260일 때 값을 구하시오
	 * */
	
	/*
	 * 힌트1 
	 * 가장 큰 화폐 단위부터 돈을 거슬러 주는 것
	 * */
	
	
	/*해설
	 * 그리디 알고리즘의 정당성
	 * 그리디 알고리즘을 모든 알고리즘 문제에 적용할수 있는건 아니다.
	 * 거스름돈 문제를 그리디 알고리즘으로 해결할 수 있는 이유는 가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의
	 * 동전들을 종합해 다른 해가 나올 수 없기 때문이다
	 * 
	 * 대부분의 그릳 알고리즘 문제에서는 이처럼 문제 풀이를 위한 최소한의 아이이어를 떠올리고 이것이 정당한지 검토할 수 있어야 답을 도출할 수 있다
	 * */
	public static void main(String[] args) {
		int money = 1260;
		int[] coninlist = {500,100,50,10};
		int count = 0;
		for(int i = 0; i<coninlist.length; i++) {
			count += money / coninlist[i];
			money = money % coninlist[i];
		}
		System.out.println(count);
		
	}

}
